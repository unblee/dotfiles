# +------------------+----------------------------------------------+
# | hook_add         | プラグインが dein.vim によって追加されたとき |
# +------------------+----------------------------------------------+
# | hook_source      | プラグインが読み込まれる直前                 |
# +------------------+----------------------------------------------+
# | hook_post_source | プラグインが読み込まれた直後                 |
# +------------------+----------------------------------------------+
# | hook_post_update | プラグインが読み込まれた直後                 |
# +------------------+----------------------------------------------+

[ftplugin]
_ = '''
setl formatoptions-=ro | setl formatoptions+=mMBl
'''
go = '''
set noexpandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
'''
make = '''
set noexpandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
'''
gitconfig = '''
set noexpandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
'''

[[plugins]]
# プラグインマネージャ
repo = 'Shougo/dein.vim'

[[plugins]]
# dein の便利コマンド集
repo = 'haya14busa/dein-command.vim'

[[plugins]]
# 非同期実行に必要なライブラリ
repo = 'Shougo/vimproc.vim'
hook_add = '''
if has("win64")
  let g:vimproc#download_windows_dll = 1
endif
'''
hook_post_update = '''
  if dein#util#_is_windows()
  elseif dein#util#_is_cygwin()
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
# 現在のカーソル位置のコンテキストによって filetype を切り換える
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'

[[plugins]]
# toml シンタックス
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
# ビジュアル選択した状態でIやAを入力した場合でも
# 行頭や行末に文字列を挿入してくれるようになる
repo = 'kana/vim-niceblock'
on_map = '<Plug>'
hook_add = '''
xmap I  <Plug>(niceblock-I)
xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
# ファイラ
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch'}
let g:ctrlp_show_hidden = 1
if executable('files')
  let g:ctrlp_use_caching = 0
  let g:ctrlp_user_command = 'files -A %s'
endif
'''

[[plugins]]
# ctrlp matcher
repo = 'FelikZ/ctrlp-py-matcher'
depends = 'ctrlp.vim'

[[plugins]]
# コード実行
repo = 'thinca/vim-quickrun'

[[plugins]]
# % コマンドの拡張
repo = "k-takata/matchit.vim"
hook_add = '''
let b:match_ignorecase=1
augroup matchit
  au!
  au FileType ruby let b:match_words = '\<\(module\|class\|def\|begin\|do\|if\|unless\|case\)\>:\<\(elsif\|when\|rescue\)\>:\<\(else\|ensure\)\>:\<end\>'
augroup END
'''

[[plugins]]
# 移動支援
repo = 'easymotion/vim-easymotion'
hook_add = '''
map  <Space> <Plug>(easymotion-s2)
xmap <Space> <Plug>(easymotion-s2)
omap <Space> <Plug>(easymotion-s2)
map  <Leader>l <Plug>(easymotion-lineforward)
map  <Leader>j <Plug>(easymotion-j)
map  <Leader>k <Plug>(easymotion-k)
map  <Leader>h <Plug>(easymotion-linebackward)
let  g:EasyMotion_do_mapping = 0
let  g:EasyMotion_smartcase = 1
let  g:EasyMotion_startofline = 0
let  g:EasyMotion_use_upper = 1
let  g:EasyMotion_enter_jump_first = 1
let  g:EasyMotion_space_jump_first = 1
'''

[[plugins]]
# f を拡張、f で繰り返し
repo = 'rhysd/clever-f.vim'
hook_add = '''
let g:clever_f_smart_case = 1
'''

[[plugins]]
# 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
# インタフェース
repo = 'Shougo/unite.vim'
on_cmd = 'Unite'

[[plugins]]
# Unite に file_mru を追加
repo = 'Shougo/neomru.vim'
depends = 'unite.vim'
hook_add = '''
let g:neomru#time_format = "(%Y/%m/%d %H:%M:%S)"
'''

[[plugins]]
# カラースキーマ
repo = 'joshdick/onedark.vim'
merged = 0

[[plugins]]
# ステータスラインのカスタマイズ
repo = 'itchyny/lightline.vim'
depends = [ 'onedark', 'ale' ]
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'filename' ], [ 'ctrlpmark', 'qfstatusline' ], [ 'ale' ] ],
      \   'right': [ [ 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'ctrlpmark': 'CtrlPMark',
      \   'ale': 'ALEGetStatusLine',
      \ },
      \ 'component_expand': {
      \   'qfstatusline': 'qfstatusline#Update',
      \ },
      \ 'component_type': {
      \   'qfstatusline': 'error',
      \ },
      \ 'subseparator': { 'left': '|', 'right': '|' },
      \ }

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? "RO" : ''
endfunction

function! MyFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Mundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Mundo__' ? 'Mundo' :
        \ fname == '__Mundo_Preview__' ? 'Mundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
      \ 'main': 'CtrlPStatusFunc_1',
      \ 'prog': 'CtrlPStatusFunc_2',
      \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
  let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction
let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0
let g:Qfstatusline#UpdateCmd = function('lightline#update')
'''

[[plugins]]
# undo 履歴の表示
repo = 'simnalamburt/vim-mundo'
on_cmd = 'MundoToggle'
hook_add = '''
nnoremap <Leader>g :MundoToggle<CR>
'''

[[plugins]]
# ファイラ
repo = 'Shougo/vimfiler.vim'
on_cmd = ['VimFiler', 'VimFilerExplorer']
hook_add = '''
let g:vimfiler_enable_auto_cd=1
let g:vimfiler_as_default_explorer=1
nnoremap <Leader>e :VimFilerExplorer -find<CR>
'''

[[plugins]]
# バッファ操作
repo = 'troydm/easybuffer.vim'
on_cmd = 'EasyBuffer'
hook_add = '''
nnoremap <Leader>b :EasyBuffer<CR>
'''

[[plugins]]
# 検索マッチ数表示
repo = 'osyo-manga/vim-anzu'

[[plugins]]
# インデントレベル可視化
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_color_term = 239
let g:indentLine_fileTypeExclude = ['help']
'''

[[plugins]]
# 行末スペースの可視化
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
let g:better_whitespace_filetypes_blacklist = [
      \ 'unite',
      \ 'help',
      \ 'vimfiler',
      \ 'vimshell' ]
highlight ExtraWhitespace ctermbg=red
'''

[[plugins]]
# コメントIN/OUT 切り替え
repo = "tyru/caw.vim.git"
hook_add = '''
nmap <C-_> <Plug>(caw:hatpos:toggle)
vmap <C-_> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
# 対応するカッコを自動入力
repo = 'cohama/lexima.vim'

[[plugins]]
# matchit の対応をハイライト
repo = 'vimtaku/hl_matchit.vim'
hook_add = '''
let g:hl_matchit_enable_on_vim_startup = 1
let g:hl_matchit_hl_groupname = 'Search'
let g:hl_matchit_speed_level = 1
let g:hl_matchit_allow_ft = 'html,vim,sh,ruby'
let g:hl_matchit_cursor_wait = 0.010
'''

[[plugins]]
# ansible yaml
repo = 'chase/vim-ansible-yaml'
hook_add = '''
let g:ansible_options = {'ignore_blank_lines': 1}
'''

[[plugins]]
# インクリメンタルサーチの強化
repo = 'haya14busa/incsearch.vim'
hook_add = '''
function! s:config_fuzzyall(...) abort
  return extend(copy({
  \   'converters': [
  \     incsearch#config#fuzzy#converter(),
  \     incsearch#config#fuzzyspell#converter()
  \   ],
  \ }), get(a:, 1, {}))
endfunction
function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzy#converter()],
  \   'modules': [incsearch#config#easymotion#module()],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
noremap <silent><expr> z/ incsearch#go(<SID>config_fuzzyall())
noremap <silent><expr> z? incsearch#go(<SID>config_fuzzyall({'command': '?'}))
noremap <silent><expr> zg/ incsearch#go(<SID>config_fuzzyall({'is_stay': 1}))
noremap <silent><expr> zz/ incsearch#go(<SID>config_easyfuzzymotion())
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n <Plug>(incsearch-nohl)<Plug>(anzu-n-with-echo)
map N <Plug>(incsearch-nohl)<Plug>(anzu-N-with-echo)
map * <Plug>(incsearch-nohl-*)
map # <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
let g:incsearch#magic = '\v'
augroup incsearch-keymap
  autocmd!
  autocmd VimEnter * call s:incsearch_keymap()
augroup END
function! s:incsearch_keymap()
  IncSearchNoreMap <Tab> <Over>(buffer-complete)
  IncSearchNoreMap <S-Tab> <Over>(buffer-complete-prev)
endfunction
'''
[[plugins]]
# インクリメンタルサーチの強化
repo = 'haya14busa/incsearch-fuzzy.vim'
[[plugins]]
# インクリメンタルサーチの強化
repo = 'haya14busa/incsearch-easymotion.vim'
depends = 'vim-easymotion'

[[plugins]]
# text object の拡張
repo = 'kana/vim-textobj-user'
[[plugins]]
# b でほとんどのブロックを指定できる
repo = 'rhysd/vim-textobj-anyblock'
[[plugins]]
# I, A で矩形選択をテキストオブジェクトにする
repo = 'osyo-manga/vim-textobj-blockwise'
[[plugins]]
# f<any> で<any>に指定した任意の区切り文字の間を指定できる
repo = 'thinca/vim-textobj-between'
[[plugins]]
# l で行を指定できる
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
# テキストを囲うものを編集
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
hook_add = '''
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)
nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)
'''

[[plugins]]
# ヤンクオペレータの範囲をハイライト
repo = 'haya14busa/vim-operator-flashy'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
'''

[[plugins]]
# ruby
repo = 'vim-ruby/vim-ruby'
hook_source = '''
let g:ruby_indent_access_modifier_style = 'indent'
let g:ruby_indent_block_style = 'do'
'''

[[plugins]]
# nginx
on_ft = 'nginx'
repo = 'chr4/nginx.vim'

[[plugins]]
# json
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
let g:vim_json_syntax_conceal=0
'''

[[plugins]]
# yaml
repo = 'stephpy/vim-yaml'
on_ft = 'yaml'

[[plugins]]
# HTML5
repo = 'othree/html5.vim'
on_ft = 'html'
hook_add = '''
let g:html5_event_handler_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_aria_attributes_complete = 1
'''

[[plugins]]
# golang
repo = 'fatih/vim-go'
hook_source = '''
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1
let g:go_metalinter_deadline = "5s"
let g:go_metalinter_autosave_enabled = ['vet', \
                                        'golint', \
                                        'deadcode', \
                                        'gosimple', \
                                        'unused', \
                                        'misspell', \
                                        'unparam']
'''

[[plugins]]
# diff algorithm
repo = 'chrisbra/vim-diff-enhanced'
hook_add = '''
let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=histogram")'
'''

[[plugins]]
# window select
repo = 't9md/vim-choosewin'
on_map = '<Plug>'
hook_add = '''
nmap - <Plug>(choosewin)
let g:choosewin_overlay_enable=1
let g:choosewin_overlay_clear_multibyte=1
let g:choosewin_blink_on_land=0
let g:choosewin_statusline_replace=0
let g:choosewin_tabline_replace=0
'''

[[plugins]]
# easy align
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>'
hook_add = '''
vmap <Enter> <Plug>(EasyAlign)
'''

[[plugins]]
# benchmark
repo = 'mattn/benchvimrc-vim'
on_cmd = 'BenchVimrc'

[[plugins]]
# J での結合を便利にする
repo = "osyo-manga/vim-jplus"
on_map = '<Plug>'
hook_add = '''
" <Leader>J で任意の文字(複数可)を入力して結合を行う
nmap <Leader>J <Plug>(jplus-input)
vmap <Leader>J <Plug>(jplus-input)
'''

[[plugins]]
# カーソル下にある単語をハイライト
repo = "t9md/vim-quickhl"
on_map = '<Plug>'
hook_add = '''
" カーソル下のハイライトをトグルする
map m <Plug>(quickhl-manual-this)
" ハイライトをすべて消す
map M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
# systemd unit file
repo = 'Matt-Deacalion/vim-systemd-syntax'

# # CSS & JS Support
# # http://yoshiko-pg.github.io/slides/20151121-vimconf/#22
# NeoBundle 'hail2u/vim-css3-syntax'
# NeoBundle 'jiangmiao/simple-javascript-indenter'
# NeoBundle 'othree/yajs.vim'
# NeoBundle 'othree/javascript-libraries-syntax.vim'
# NeoBundle 'isRuslan/vim-es6'
# NeoBundle "pangloss/vim-javascript"
# NeoBundle 'mattn/emmet-vim'
# NeoBundle 'lilydjwg/colorizer'
# NeoBundle 'csscomb/vim-csscomb'

[[plugins]]
# EditorConfig
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
# git sign
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_max_signs = 1000
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
" let g:gitgutter_sign_column_always = 1
let g:gitgutter_map_keys = 0
let g:gitgutter_diff_args = '-w'
set signcolumn=yes
'''

[[plugins]]
repo = 'docker/docker'
rtp = '/contrib/syntax/vim/'

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

[[plugins]]
# 背景透過
repo = 'miyakogi/seiya.vim'
hook_add = '''
let g:seiya_auto_enable=1
let g:seiya_target_groups = has('nvim') ? ['guibg'] : ['ctermbg']
'''

[[plugins]]
# asynchronous linter
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_error = 'E>'
let g:ale_sign_warning = 'W-'
let g:ale_sign_column_always = 1
let g:ale_statusline_format = ['E %d', 'W %d', '']
let g:ale_echo_msg_format = '[%linter%] %s'
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
# A (Neo)vim plugin for formatting code
repo = 'sbdchd/neoformat'
hook_add = '''
cnoremap ww Neoformat<CR>
'''

[[plugins]]
# Vim plugin for working with python virtualenvs
repo = 'jmcantrell/vim-virtualenv'
