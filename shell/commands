#!/bin/bash

minikube-start-with-docker-env() {
  minikube start
  echo "Load 'minikube docker-env'"
  eval $(minikube docker-env)
}

vip() {
  local F=$(files|fzf --reverse --height 70%)
  if [[ "$F" != "" ]]; then
    vim "$F" || :
  fi
}

cip() {
  local TD=`git rev-parse --show-toplevel 2> /dev/null`
  cd $TD/`files -d $TD|sed "s|${TD}/||g;s|^$|\.|"|fzf --reverse --height 70%`
}

gout() {
  if [[ "$1" == "" ]]; then
    echo "Please specify branch name"
    return
  fi
  local branch_name="$1"
  git branch | grep -q "$branch_name"
  if [[ $? != 0 ]]; then
    # 指定したブランチが存在していない場合ブランチを作成
    git branch "$branch_name"
  fi
  git checkout "$branch_name"
}

# git-foresta
gf() {
  git-foresta --all --style=10 --graph-margin-right=2 | less -RSX
}

aws-mfa() {
  if [ "x$_AWS_ACCESS_KEY_ID" != "x" ]; then
    clear-aws-mfa
  fi

  echo -n "MFA token code: "
  read code

  credentials=$(aws sts get-session-token --serial-number "$(aws iam list-mfa-devices | jq -r '.MFADevices[0].SerialNumber')" --token-code "$code")

  export _AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
  export _AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

  export AWS_ACCESS_KEY_ID=$(echo "$credentials" | jq -r '.Credentials.AccessKeyId')
  export AWS_SECRET_ACCESS_KEY=$(echo "$credentials" | jq -r '.Credentials.SecretAccessKey')
  export AWS_SESSION_TOKEN=$(echo "$credentials" | jq -r '.Credentials.SessionToken')
}

clear-aws-mfa() {
  export AWS_ACCESS_KEY_ID=$_AWS_ACCESS_KEY_ID
  export AWS_SECRET_ACCESS_KEY=$_AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN _AWS_ACCESS_KEY_ID _AWS_SECRET_ACCESS_KEY
}
